"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const path_1 = require("path");
const fs_1 = require("fs");
const isValidPath = require("is-valid-path");
const graphql_import_1 = require("graphql-import");
const GQL_EXTENSIONS = ['.gql', '.graphql', '.graphqls'];
class GraphQLFileLoader {
    loaderId() {
        return 'graphql-file';
    }
    async canLoad(pointer, options) {
        if (isValidPath(pointer)) {
            const extension = path_1.extname(pointer).toLowerCase();
            if (GQL_EXTENSIONS.includes(extension)) {
                const normalizedFilePath = path_1.isAbsolute(pointer) ? pointer : path_1.resolve(options.cwd || process.cwd(), pointer);
                if (fs_1.existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        const normalizedFilePath = path_1.isAbsolute(pointer) ? pointer : path_1.resolve(options.cwd || process.cwd(), pointer);
        const content = fs_1.readFileSync(normalizedFilePath, 'utf-8').trim();
        if (content && content !== '') {
            if (!options.skipGraphQLImport && /^\#.*import /i.test(content.trimLeft())) {
                const importedSchema = graphql_import_1.importSchema(normalizedFilePath);
                return {
                    location: pointer,
                    document: graphql_1.parse(importedSchema),
                };
            }
            else {
                return {
                    location: pointer,
                    document: graphql_1.parse(new graphql_1.Source(content, pointer)),
                };
            }
        }
        return null;
    }
}
exports.GraphQLFileLoader = GraphQLFileLoader;
//# sourceMappingURL=load-from-gql-file.js.map