"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const path_1 = require("path");
const extract_document_string_from_code_file_1 = require("./extract-document-string-from-code-file");
const common_1 = require("@graphql-toolkit/common");
const fs_1 = require("fs");
const isValidPath = require("is-valid-path");
function isSchemaText(obj) {
    return typeof obj === 'string';
}
function isWrappedSchemaJson(obj) {
    const json = obj;
    return json.data !== undefined && json.data.__schema !== undefined;
}
function isSchemaJson(obj) {
    const json = obj;
    return json !== undefined && json.__schema !== undefined;
}
function isSchemaObject(obj) {
    return obj instanceof graphql_1.GraphQLSchema;
}
function isSchemaAst(obj) {
    return obj.kind !== undefined;
}
function resolveExport(fileExport) {
    if (isSchemaObject(fileExport)) {
        return graphql_1.parse(common_1.printSchemaWithDirectives(fileExport));
    }
    else if (isSchemaText(fileExport)) {
        return graphql_1.parse(fileExport);
    }
    else if (isWrappedSchemaJson(fileExport)) {
        const asSchema = graphql_1.buildClientSchema(fileExport.data);
        const printed = common_1.printSchemaWithDirectives(asSchema);
        return graphql_1.parse(printed);
    }
    else if (isSchemaJson(fileExport)) {
        const asSchema = graphql_1.buildClientSchema(fileExport);
        const printed = common_1.printSchemaWithDirectives(asSchema);
        return graphql_1.parse(printed);
    }
    else if (isSchemaAst(fileExport)) {
        return fileExport;
    }
    return null;
}
async function tryToLoadFromExport(rawFilePath) {
    let filePath = rawFilePath;
    try {
        filePath = common_1.fixWindowsPath(filePath);
        if (require && require.cache) {
            filePath = require.resolve(filePath);
            if (require.cache[filePath]) {
                delete require.cache[filePath];
            }
        }
        const rawExports = await Promise.resolve().then(() => require(filePath));
        if (rawExports) {
            let rawExport = rawExports.default || rawExports.schema || rawExports;
            if (rawExport) {
                let exportValue = await rawExport;
                exportValue = await (exportValue.default || exportValue.schema || exportValue.typeDefs || exportValue);
                try {
                    return resolveExport(exportValue);
                }
                catch (e) {
                    throw new Error('Exported schema must be of type GraphQLSchema, text, AST, or introspection JSON.');
                }
            }
            else {
                throw new Error(`Invalid export from export file ${filePath}: missing default export or 'schema' export!`);
            }
        }
        else {
            throw new Error(`Invalid export from export file ${filePath}: empty export!`);
        }
    }
    catch (e) {
        throw new Error(`Unable to load from file "${filePath}": ${e.message}`);
    }
}
async function tryToLoadFromCodeAst(filePath, options) {
    const content = fs_1.readFileSync(filePath, 'utf-8');
    const foundDoc = await extract_document_string_from_code_file_1.extractDocumentStringFromCodeFile(new graphql_1.Source(content, filePath), options || {});
    if (foundDoc) {
        return graphql_1.parse(foundDoc);
    }
    else {
        return null;
    }
}
const CODE_FILE_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx'];
class CodeFileLoader {
    loaderId() {
        return 'code-file';
    }
    async canLoad(pointer, options) {
        if (isValidPath(pointer)) {
            const extension = path_1.extname(pointer).toLowerCase();
            if (CODE_FILE_EXTENSIONS.includes(extension)) {
                const normalizedFilePath = path_1.isAbsolute(pointer) ? pointer : path_1.resolve(options.cwd || process.cwd(), pointer);
                if (fs_1.existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        let loaded = null;
        const normalizedFilePath = path_1.isAbsolute(pointer) ? pointer : path_1.resolve(options.cwd || process.cwd(), pointer);
        try {
            const result = await tryToLoadFromCodeAst(normalizedFilePath, options);
            if (result) {
                loaded = result;
            }
        }
        catch (e) {
            common_1.debugLog(`Failed to load schema from code file "${normalizedFilePath}" using AST: ${e.message}`);
            throw e;
        }
        if (!loaded && !options.noRequire) {
            if (options && options.require) {
                await Promise.all(common_1.asArray(options.require).map(m => Promise.resolve().then(() => require(m))));
            }
            loaded = await tryToLoadFromExport(normalizedFilePath);
        }
        return {
            document: loaded,
            location: normalizedFilePath,
        };
    }
}
exports.CodeFileLoader = CodeFileLoader;
//# sourceMappingURL=load-from-code-file.js.map