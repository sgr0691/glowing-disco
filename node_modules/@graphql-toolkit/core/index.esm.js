import { Kind, parse, GraphQLSchema, buildASTSchema } from 'graphql';
import { debugLog, asArray, isDocumentString, printSchemaWithDirectives, fixWindowsPath } from '@graphql-toolkit/common';
import { join } from 'path';
import { mergeTypeDefs } from '@graphql-toolkit/schema-merging';

const filterKind = (content, filterKinds) => {
    if (content && content.definitions && content.definitions.length && filterKinds && filterKinds.length > 0) {
        const invalidDefinitions = [];
        const validDefinitions = [];
        for (const definitionNode of content.definitions) {
            if (filterKinds.includes(definitionNode.kind)) {
                invalidDefinitions.push(definitionNode);
            }
            else {
                validDefinitions.push(definitionNode);
            }
        }
        if (invalidDefinitions.length > 0) {
            invalidDefinitions.forEach(d => {
                debugLog(`Filtered document of kind ${d.kind} due to filter policy (${filterKinds.join(', ')})`);
            });
        }
        return {
            kind: Kind.DOCUMENT,
            definitions: validDefinitions,
        };
    }
    return content;
};

function documentFromString(pointer, filterKinds = []) {
    let content = parse(pointer);
    const found = [];
    content = filterKind(content, filterKinds);
    if (content && content.definitions && content.definitions.length > 0) {
        found.push({
            location: 'file.graphql',
            document: content,
        });
    }
    return found;
}

const isGlob = require('is-glob');
const globby = require('globby');
function normalizePointers(unnormalizedPointerOrPointers) {
    return asArray(unnormalizedPointerOrPointers).reduce((normalizedPointers, unnormalizedPointer) => {
        if (typeof unnormalizedPointer === 'string') {
            normalizedPointers[unnormalizedPointer] = {};
        }
        else if (typeof unnormalizedPointer === 'object') {
            Object.assign(normalizedPointers, unnormalizedPointer);
        }
        else {
            throw new Error(`Invalid pointer ${unnormalizedPointer}`);
        }
        return normalizedPointers;
    }, {});
}
async function getCustomLoaderByPath(path, cwd) {
    try {
        const requiredModule = await import(join(cwd, path));
        if (requiredModule && requiredModule.default && typeof requiredModule.default === 'function') {
            return requiredModule.default;
        }
        if (requiredModule && typeof requiredModule === 'function') {
            return requiredModule;
        }
        return null;
    }
    catch (e) {
        return null;
    }
}
async function loadTypedefsUsingLoaders(loaders, pointerOrPointers, options = {}, filterKinds = [], cwd = process.cwd()) {
    const normalizedPointerOptionsMap = normalizePointers(pointerOrPointers);
    const loadPromises$ = [];
    const found = [];
    const foundGlobs = [];
    const globOptions = {};
    for (const pointer in normalizedPointerOptionsMap) {
        const pointerOptions = normalizedPointerOptionsMap[pointer];
        if (isDocumentString(pointer)) {
            loadPromises$.push(Promise.resolve().then(async () => {
                const docs = documentFromString(pointer, filterKinds);
                found.push(...docs);
            }));
        }
        else if (isGlob(pointer)) {
            foundGlobs.push(pointer);
            Object.assign(globOptions, pointerOptions);
        }
        else if (pointerOptions.loader) {
            loadPromises$.push(Promise.resolve().then(async () => {
                let loader;
                if (typeof pointerOptions.loader === 'string') {
                    loader = await getCustomLoaderByPath(pointerOptions.loader, cwd);
                }
                else if (typeof pointerOptions.loader === 'function') {
                    loader = pointerOptions.loader;
                }
                if (typeof loader !== 'function') {
                    throw new Error(`Failed to load custom loader: ${pointerOptions.loader}`);
                }
                let content = await loader(pointer, Object.assign(Object.assign({}, options), pointerOptions), normalizedPointerOptionsMap);
                if (content && content instanceof GraphQLSchema) {
                    content = parse(printSchemaWithDirectives(content));
                }
                content = filterKind(content, filterKinds);
                if (content && content.definitions && content.definitions.length > 0) {
                    found.push({
                        location: pointer,
                        document: content,
                    });
                }
            }));
        }
        else {
            loadPromises$.push(Promise.resolve().then(async () => {
                let content = await loadSingleFile(loaders, pointer, Object.assign(Object.assign({}, options), pointerOptions));
                content = filterKind(content, filterKinds);
                if (content && content.definitions && content.definitions.length > 0) {
                    found.push({
                        location: pointer,
                        document: content,
                    });
                }
            }));
        }
    }
    if (foundGlobs.length > 0) {
        if (options.ignore) {
            const ignoreList = asArray(options.ignore)
                .map(g => `!(${g})`)
                .map(p => fixWindowsPath(p));
            if (ignoreList.length > 0) {
                foundGlobs.push(...ignoreList);
            }
        }
        loadPromises$.push(Promise.resolve().then(async () => {
            const paths = await globby(foundGlobs, { cwd, absolute: true });
            await Promise.all(paths.map(async (path) => {
                if (!path.endsWith('.d.ts') && !path.endsWith('.spec.ts') && !path.endsWith('.spec.js') && !path.endsWith('.test.ts') && !path.endsWith('.test.js')) {
                    let content;
                    if (globOptions.loader) {
                        let loader;
                        if (typeof globOptions.loader === 'string') {
                            loader = await getCustomLoaderByPath(globOptions.loader, cwd);
                        }
                        else if (typeof globOptions.loader === 'function') {
                            loader = globOptions.loader;
                        }
                        if (typeof loader !== 'function') {
                            throw new Error(`Failed to load custom loader: ${globOptions.loader}`);
                        }
                        content = await loader(path, Object.assign(Object.assign({}, options), globOptions), normalizedPointerOptionsMap);
                        if (content && content instanceof GraphQLSchema) {
                            content = parse(printSchemaWithDirectives(content));
                        }
                    }
                    else {
                        content = await loadSingleFile(loaders, path, Object.assign(Object.assign({}, options), globOptions));
                    }
                    content = filterKind(content, filterKinds);
                    if (content && content.definitions && content.definitions.length > 0) {
                        found.push({
                            location: path,
                            document: content,
                        });
                    }
                }
            }));
        }));
    }
    await Promise.all(loadPromises$);
    const pointerList = Object.keys(normalizedPointerOptionsMap);
    if (pointerList.length > 0 && found.length === 0) {
        throw new Error(`Unable to find any GraphQL type definitions for the following pointers: ${pointerList.join(', ')}`);
    }
    return found.sort((left, right) => left.location.localeCompare(right.location));
}
async function loadSingleFile(loaders, pointer, options = {}) {
    try {
        for (const loader of loaders) {
            const canLoad = await loader.canLoad(pointer, options);
            if (canLoad) {
                const found = await loader.load(pointer, options);
                if (found) {
                    return found.document;
                }
            }
        }
    }
    catch (e) {
        debugLog(`Failed to find any GraphQL type definitions in: ${pointer} - ${e.message}`);
        throw e;
    }
    return null;
}

const OPERATION_KINDS = [Kind.OPERATION_DEFINITION, Kind.FRAGMENT_DEFINITION];
const NON_OPERATION_KINDS = Object.keys(Kind)
    .reduce((prev, v) => [...prev, Kind[v]], [])
    .filter(v => !OPERATION_KINDS.includes(v));
async function loadDocumentsUsingLoaders(loaders, documentDef, options = {}, cwd = process.cwd()) {
    return await loadTypedefsUsingLoaders(loaders, documentDef, Object.assign(Object.assign({}, options), { skipGraphQLImport: true, noRequire: true }), NON_OPERATION_KINDS, cwd);
}

async function loadSchemaUsingLoaders(loaders, schemaPointers, options, cwd = process.cwd()) {
    const types = await loadTypedefsUsingLoaders(loaders, schemaPointers, options, OPERATION_KINDS, cwd);
    return buildASTSchema(mergeTypeDefs(types.map(m => m.document)));
}

export { NON_OPERATION_KINDS, OPERATION_KINDS, documentFromString, filterKind, loadDocumentsUsingLoaders, loadSchemaUsingLoaders, loadSingleFile, loadTypedefsUsingLoaders, normalizePointers };
