"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const isGlob = require("is-glob");
const common_1 = require("@graphql-toolkit/common");
const filter_document_kind_1 = require("./filter-document-kind");
const document_from_string_1 = require("./document-from-string");
const globby = require("globby");
const path_1 = require("path");
function normalizePointers(unnormalizedPointerOrPointers) {
    return common_1.asArray(unnormalizedPointerOrPointers).reduce((normalizedPointers, unnormalizedPointer) => {
        if (typeof unnormalizedPointer === 'string') {
            normalizedPointers[unnormalizedPointer] = {};
        }
        else if (typeof unnormalizedPointer === 'object') {
            Object.assign(normalizedPointers, unnormalizedPointer);
        }
        else {
            throw new Error(`Invalid pointer ${unnormalizedPointer}`);
        }
        return normalizedPointers;
    }, {});
}
exports.normalizePointers = normalizePointers;
async function getCustomLoaderByPath(path, cwd) {
    try {
        const requiredModule = await Promise.resolve().then(() => require(path_1.join(cwd, path)));
        if (requiredModule && requiredModule.default && typeof requiredModule.default === 'function') {
            return requiredModule.default;
        }
        if (requiredModule && typeof requiredModule === 'function') {
            return requiredModule;
        }
        return null;
    }
    catch (e) {
        return null;
    }
}
async function loadTypedefsUsingLoaders(loaders, pointerOrPointers, options = {}, filterKinds = [], cwd = process.cwd()) {
    const normalizedPointerOptionsMap = normalizePointers(pointerOrPointers);
    const loadPromises$ = [];
    const found = [];
    const foundGlobs = [];
    const globOptions = {};
    for (const pointer in normalizedPointerOptionsMap) {
        const pointerOptions = normalizedPointerOptionsMap[pointer];
        if (common_1.isDocumentString(pointer)) {
            loadPromises$.push(Promise.resolve().then(async () => {
                const docs = document_from_string_1.documentFromString(pointer, filterKinds);
                found.push(...docs);
            }));
        }
        else if (isGlob(pointer)) {
            foundGlobs.push(pointer);
            Object.assign(globOptions, pointerOptions);
        }
        else if (pointerOptions.loader) {
            loadPromises$.push(Promise.resolve().then(async () => {
                let loader;
                if (typeof pointerOptions.loader === 'string') {
                    loader = await getCustomLoaderByPath(pointerOptions.loader, cwd);
                }
                else if (typeof pointerOptions.loader === 'function') {
                    loader = pointerOptions.loader;
                }
                if (typeof loader !== 'function') {
                    throw new Error(`Failed to load custom loader: ${pointerOptions.loader}`);
                }
                let content = await loader(pointer, Object.assign(Object.assign({}, options), pointerOptions), normalizedPointerOptionsMap);
                if (content && content instanceof graphql_1.GraphQLSchema) {
                    content = graphql_1.parse(common_1.printSchemaWithDirectives(content));
                }
                content = filter_document_kind_1.filterKind(content, filterKinds);
                if (content && content.definitions && content.definitions.length > 0) {
                    found.push({
                        location: pointer,
                        document: content,
                    });
                }
            }));
        }
        else {
            loadPromises$.push(Promise.resolve().then(async () => {
                let content = await loadSingleFile(loaders, pointer, Object.assign(Object.assign({}, options), pointerOptions));
                content = filter_document_kind_1.filterKind(content, filterKinds);
                if (content && content.definitions && content.definitions.length > 0) {
                    found.push({
                        location: pointer,
                        document: content,
                    });
                }
            }));
        }
    }
    if (foundGlobs.length > 0) {
        if (options.ignore) {
            const ignoreList = common_1.asArray(options.ignore)
                .map(g => `!(${g})`)
                .map(p => common_1.fixWindowsPath(p));
            if (ignoreList.length > 0) {
                foundGlobs.push(...ignoreList);
            }
        }
        loadPromises$.push(Promise.resolve().then(async () => {
            const paths = await globby(foundGlobs, { cwd, absolute: true });
            await Promise.all(paths.map(async (path) => {
                if (!path.endsWith('.d.ts') && !path.endsWith('.spec.ts') && !path.endsWith('.spec.js') && !path.endsWith('.test.ts') && !path.endsWith('.test.js')) {
                    let content;
                    if (globOptions.loader) {
                        let loader;
                        if (typeof globOptions.loader === 'string') {
                            loader = await getCustomLoaderByPath(globOptions.loader, cwd);
                        }
                        else if (typeof globOptions.loader === 'function') {
                            loader = globOptions.loader;
                        }
                        if (typeof loader !== 'function') {
                            throw new Error(`Failed to load custom loader: ${globOptions.loader}`);
                        }
                        content = await loader(path, Object.assign(Object.assign({}, options), globOptions), normalizedPointerOptionsMap);
                        if (content && content instanceof graphql_1.GraphQLSchema) {
                            content = graphql_1.parse(common_1.printSchemaWithDirectives(content));
                        }
                    }
                    else {
                        content = await loadSingleFile(loaders, path, Object.assign(Object.assign({}, options), globOptions));
                    }
                    content = filter_document_kind_1.filterKind(content, filterKinds);
                    if (content && content.definitions && content.definitions.length > 0) {
                        found.push({
                            location: path,
                            document: content,
                        });
                    }
                }
            }));
        }));
    }
    await Promise.all(loadPromises$);
    const pointerList = Object.keys(normalizedPointerOptionsMap);
    if (pointerList.length > 0 && found.length === 0) {
        throw new Error(`Unable to find any GraphQL type definitions for the following pointers: ${pointerList.join(', ')}`);
    }
    return found.sort((left, right) => left.location.localeCompare(right.location));
}
exports.loadTypedefsUsingLoaders = loadTypedefsUsingLoaders;
async function loadSingleFile(loaders, pointer, options = {}) {
    try {
        for (const loader of loaders) {
            const canLoad = await loader.canLoad(pointer, options);
            if (canLoad) {
                const found = await loader.load(pointer, options);
                if (found) {
                    return found.document;
                }
            }
        }
    }
    catch (e) {
        common_1.debugLog(`Failed to find any GraphQL type definitions in: ${pointer} - ${e.message}`);
        throw e;
    }
    return null;
}
exports.loadSingleFile = loadSingleFile;
//# sourceMappingURL=load-typedefs.js.map