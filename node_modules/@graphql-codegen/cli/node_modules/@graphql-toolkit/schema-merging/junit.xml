<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="76" failures="0" time="3.441">
  <testsuite name="Merge Nodes" errors="0" failures="0" skipped="0" timestamp="2019-10-24T11:33:44" time="2.469" tests="22">
    <testcase classname="Merge Nodes type" name="Should merge two GraphQL types correctly when one of them is empty" time="0.004" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge two GraphQL Types correctly" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge two GraphQL Types correctly when they have shared fields" time="0.002" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types that extends the same interface" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types that has interface and then override without it" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types and preserve directives and not override" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types and preserve directives and merge multiple" time="0" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types and preserve directives" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types and merge directives" time="0.003" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types and merge directives (reversed)" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge GraphQL Types that extends the different interfaces" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes type" name="Should merge two GraphQL Types correctly when they have a conflict" time="0.016" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes enum" name="should merge different enums values" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes enum" name="should merge different same values" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes enum" name="should merge directives correctly" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes enum" name="should merge directives correctly when only one defined" time="0.01" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes union" name="should merge unions possible types" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes scalar" name="should merge scalar with the same type" time="0" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes input" name="should merge input" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes input" name="should merge input and prefer NonNullable over Nullable" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes schema" name="should merge Query type correctly" time="0.001" file="tests/merge-nodes.spec.ts">
    </testcase>
    <testcase classname="Merge Nodes schema" name="should remove schema definition" time="0" file="tests/merge-nodes.spec.ts">
    </testcase>
  </testsuite>
  <testsuite name="Merge Resolvers" errors="0" failures="0" skipped="0" timestamp="2019-10-24T11:33:44" time="2.619" tests="7">
    <testcase classname="Merge Resolvers" name="should return the correct value when falsely value provided" time="0.099" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should return the correct value when empty array provided" time="0.001" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should return the correct value when one value array provided" time="0" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should return the correct when multiple values provided" time="0.001" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should merge first level fields" time="0" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should exclude types" time="0" file="tests/merge-resolvers.spec.ts">
    </testcase>
    <testcase classname="Merge Resolvers" name="should exclude fields" time="0.001" file="tests/merge-resolvers.spec.ts">
    </testcase>
  </testsuite>
  <testsuite name="Merge TypeDefs" errors="0" failures="0" skipped="0" timestamp="2019-10-24T11:33:44" time="2.637" tests="47">
    <testcase classname="Merge TypeDefs AST Schema Fixing" name="Should handle correctly schema without valid root AST node" time="0.015" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs AST Schema Fixing" name="Should handle correctly schema without valid types AST nodes" time="0.041" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeGraphQLTypes" name="should return the correct definition of Schema" time="0.002" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeGraphQLTypes" name="should return the correct definition of Schema" time="0.01" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeGraphQLTypes" name="should accept root schema object" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeGraphQLTypes" name="should return the correct definition of Schema when it defined multiple times" time="0.002" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should return a Document with the correct values" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should skip printing schema definition object on session" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should keep scalars" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge descriptions" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge everything correctly" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should include directives" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should append and extend directives" time="0.007" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should fail if inputs of the same directive are different from each other" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge the same directives" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="stacks all directives on fields" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge two GraphQLSchema with directives correctly" time="0.008" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge when directive uses enum" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge the same directives and its locations" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs mergeTypeDefs" name="should merge arguments" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle string correctly" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle compiled gql correctly" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle compiled gql and strings correctly" time="0.002" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle GraphQLSchema correctly" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should merge GraphQL Schemas that have schema definition" time="0.002" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle all merged correctly" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should allow GraphQLSchema with empty Query" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should allow GraphQLSchema with empty Query" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle extend types" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle extend types when GraphQLSchema is the source" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle extend input typee" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should fail when a field is already defined and has a different type" time="0.012" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should preserve an extend keyword if there is no base" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should merge unions correctly" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should merge unions correctly without extend" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should handle extend inputs" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should extend extension types" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs input arguments" name="should extend extension input types" time="0.001" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="includes mutationType" time="0.008" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="includes first product ENUM type" time="0.003" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="preserves the field comments" time="0.008" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="preserves the type comments" time="0.004" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="preserves the input field comments" time="0.01" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs comments" name="supports already parsed documents" time="0.004" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs" name="supports already parsed documents" time="0.008" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs" name="excludes fields" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
    <testcase classname="Merge TypeDefs" name="excludes types" time="0" file="tests/merge-typedefs.spec.ts">
    </testcase>
  </testsuite>
</testsuites>